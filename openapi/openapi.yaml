openapi: 3.0.3
info:
  title: PromptCrafter API
  version: "1.0.0"
  description: |
    PromptCrafter is a backend API for managing prompt libraries, designed for developers and prompt engineers to store, search, and evaluate generative AI prompts.
    - All endpoints except /auth/signup and /auth/login require Bearer token authentication.
    - API base URL: https://promptcrafter-production.up.railway.app
servers:
  - url: https://promptcrafter-production.up.railway.app

tags:
  - name: Auth
    description: User authentication
  - name: Prompts
    description: Operations on prompt objects
  - name: Logs
    description: Operations on log objects
  - name: Search
    description: Search prompt objects

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Prompt:
      type: object
      required: [_id, ownerId, title, content, model, createdAt, updatedAt]
      properties:
        _id:
          type: string
          description: Unique identifier for the prompt.
          example: prompt104
        ownerId:
          type: string
          description: ID of the user who created the prompt.
          example: user7
        title:
          type: string
          description: Short title for the prompt.
          example: Historical Explanation for Students
        content:
          type: string
          description: Text of the prompt. This is the text fed into the AI model to generate output.
          example: Explain the significance of the Industrial Revolution to high school students using clear, accessible language. Include at least two key inventions and describe how these changes affected daily life in Europe and America.
        model:
          type: string
          description: Intended AI model for the prompt.
          example: Claude-3
        tags:
          type: array
          description: Optional tags for categorizing the prompt.
          items:
            type: string
          example: ["education", "history", "students"]
        createdAt:
          type: string
          description: Timestamp when the prompt was created. Set automatically by the server.
          format: date-time
          example: "2024-06-25T17:32:05.889Z"
        updatedAt:
          type: string
          description: Timestamp of the prompt's last update. Set automatically by the server.
          format: date-time
          example: "2024-06-25T17:32:05.889Z"
    Log:
      type: object
      required: [_id, promptId, output, model, createdAt]
      properties:
        _id:
          type: string
          description: Unique identifier for the log.
          example: log104
        promptId:
          type: string
          description: ID of the prompt that generated the output.
          example: prompt104
        output:
          type: string
          description: Output generated by the AI model.
          example: The Industrial Revolution transformed how people lived and worked by introducing inventions like the steam engine and the spinning jenny. These technologies allowed factories to produce goods faster, making everyday items cheaper and more accessible.
        modelUsed:
          type: string
          description: AI model used to generate the output.
          example: Claude-3
        notes:
          type: string
          description: Optional user-provided notes on the output.
          example: Too generic.
        score:
          type: integer
          description: Optional user-assigned score of the output’s quality (e.g., 1–10).
          example: 3
        createdAt:
          type: string
          description: Timestamp when the log was created. Set automatically by the server.
          format: date-time
          example: "2024-06-25T18:05:22.112Z"
    AuthToken:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: Invalid email or password.
  parameters:
    PromptId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier of the prompt.
    LogId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: Unique identifier of the log.
    SearchQuery:
      name: q
      in: query
      required: true
      schema:
        type: string
      description: Full-text search query. Matches title, content, and tags.
    PromptIdQuery:
      name: promptId
      in: query
      required: true
      schema:
        type: string
      description: The unique ID of the prompt whose logs are to be retrieved.

security:
  - BearerAuth: []

paths:

  /auth/signup:
    post:
      tags: [Auth]
      summary: Create a new user account
      description: Creates a new user account and returns a JWT authentication token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Successful signup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          description: Missing fields or duplicate email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Missing required fields." }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Internal server error." }

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Missing required fields." }
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Invalid email or password." }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Internal server error." }

  /prompts:
    get:
      tags: [Prompts]
      summary: Retrieve all prompts
      description: Returns an array of prompt objects belonging to the user.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Array of prompt objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
    post:
      tags: [Prompts]
      summary: Create a new prompt
      description: Creates a new prompt owned by the authenticated user.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content, model]
              properties:
                title:
                  type: string
                  example: Historical Explanation for Students
                content:
                  type: string
                  example: Explain the significance of the Industrial Revolution to high school students using clear, accessible language.
                model:
                  type: string
                  example: Claude-3
                tags:
                  type: array
                  items:
                    type: string
                  example: ["education", "history"]
      responses:
        '201':
          description: Prompt created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          description: Invalid input (missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Missing required fields." }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Internal server error." }

  /prompts/{id}:
    get:
      tags: [Prompts]
      summary: Retrieve a prompt by ID
      description: Returns a prompt by its unique ID. Users can only access prompts they own.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PromptId'
      responses:
        '200':
          description: Prompt object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
        '403':
          description: Forbidden (not owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "You do not have permission to access this prompt." }
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Prompt not found." }
    patch:
      tags: [Prompts]
      summary: Update a prompt
      description: Updates a prompt by its unique ID. Only specified fields are updated. Users can only update prompts they own.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PromptId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: New Prompt Title
                content:
                  type: string
                  example: Updated prompt content.
                model:
                  type: string
                  example: Claude-3
                tags:
                  type: array
                  items:
                    type: string
                  example: ["updated", "tags"]
      responses:
        '200':
          description: Prompt updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Missing required fields." }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
        '403':
          description: Forbidden (not owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "You do not have permission to update this prompt." }
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Prompt not found." }
    delete:
      tags: [Prompts]
      summary: Delete a prompt by ID
      description: Deletes a prompt by its unique ID. Users can only delete prompts they own.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PromptId'
      responses:
        '204':
          description: Prompt deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
        '403':
          description: Forbidden (not owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "You do not have permission to delete this prompt." }
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Prompt not found." }

  /logs:
    get:
      tags: [Logs]
      summary: Retrieve all logs
      description: Returns an array of log objects belonging to the user.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Array of log objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
    post:
      tags: [Logs]
      summary: Log a generated output
      description: Creates a new log entry to record the output of a tested prompt.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [promptId, output, model]
              properties:
                promptId:
                  type: string
                  example: prompt104
                output:
                  type: string
                  example: Example output from the AI model.
                model:
                  type: string
                  example: Claude-3
                notes:
                  type: string
                  example: Output was too generic.
                score:
                  type: integer
                  example: 3
      responses:
        '201':
          description: Log created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: Invalid input (missing fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Missing required fields." }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Prompt not found." }
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Internal server error." }

  /logs/{id}:
    delete:
      tags: [Logs]
      summary: Delete a log by ID
      description: Deletes a log by its unique ID. Users can only delete logs they own.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LogId'
      responses:
        '204':
          description: Log deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
        '403':
          description: Forbidden (not owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "You do not have permission to delete this log." }
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Log not found." }

  /logs-by-prompt:
    get:
      tags: [Logs]
      summary: Retrieve logs for a specific prompt
      description: Returns an array of logs for a specific prompt.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PromptIdQuery'
      responses:
        '200':
          description: Array of log objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
        '404':
          description: Prompt not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Prompt not found." }

  /search:
    get:
      tags: [Search]
      summary: Search prompts
      description: Returns an array of prompt objects matching a full-text search query. The query matches against the title, content, and tags fields.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/SearchQuery'
      responses:
        '200':
          description: Array of prompt objects matching search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: { "error": "Authentication required." }
